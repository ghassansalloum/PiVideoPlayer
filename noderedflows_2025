[
    {
        "id": "abad9a88ca0d6f8d",
        "type": "tab",
        "label": "NEW and working?",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "84c542040034d2c2",
        "type": "group",
        "z": "abad9a88ca0d6f8d",
        "name": "Emit name of chosen episode - for Home Assistant's dashboard",
        "style": {
            "label": true
        },
        "nodes": [
            "f3ed82aa14152584",
            "5fce7e5dd9224f2c",
            "614515168d71178a",
            "596391fe7b3f5847",
            "a2eff87653e53d73"
        ],
        "x": 654,
        "y": 159,
        "w": 432,
        "h": 202
    },
    {
        "id": "50f3b47b1d62d456",
        "type": "group",
        "z": "abad9a88ca0d6f8d",
        "name": "Pick random episode when invoked",
        "style": {
            "label": true
        },
        "nodes": [
            "function_pick_random",
            "69199788a63ffebd",
            "d07147c9e3559671",
            "64a778f5f842ccab",
            "39ccc8c63aaea7fd",
            "7780ca1ff63e28f2",
            "inject_pick_random",
            "01850a0e7c90f579",
            "b8fb5788d174801a"
        ],
        "x": 14,
        "y": 139,
        "w": 612,
        "h": 222
    },
    {
        "id": "7af0599b75ce96bf",
        "type": "group",
        "z": "abad9a88ca0d6f8d",
        "name": "Play the chosen video",
        "style": {
            "label": true
        },
        "nodes": [
            "0ee5394a19ec2f9d",
            "fa0416a1027484fb",
            "10292665f314fc6c",
            "0bdf25ad2db8b823",
            "a9237caf8c926fae"
        ],
        "x": 14,
        "y": 371.5,
        "w": 612,
        "h": 149.5
    },
    {
        "id": "9aa3ae0427508409",
        "type": "group",
        "z": "abad9a88ca0d6f8d",
        "name": "Init",
        "style": {
            "label": true
        },
        "nodes": [
            "inject_list_files",
            "exec_list_files",
            "function_assign_global",
            "debug_list_files"
        ],
        "x": 14,
        "y": 31.5,
        "w": 792,
        "h": 97
    },
    {
        "id": "ff624337f71e6c66",
        "type": "group",
        "z": "abad9a88ca0d6f8d",
        "name": "Stop video - pkill",
        "style": {
            "label": true
        },
        "nodes": [
            "49232eca1c1b13cc",
            "92bcad8254dbf885",
            "751d51dfcded41f7",
            "9e34b4a2c405b0b6",
            "01dbddaf82aed932",
            "f4e3f433d82ec260"
        ],
        "x": 14,
        "y": 539,
        "w": 612,
        "h": 162
    },
    {
        "id": "8e0e14a4a8ae4da8",
        "type": "group",
        "z": "abad9a88ca0d6f8d",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "46541e988de47929",
            "3a1639b38e613dbb",
            "67678a223dc5bf97",
            "332bb8d08ca5a6d5",
            "a34c56cbb99ba96c"
        ],
        "x": 14,
        "y": 719,
        "w": 422,
        "h": 182
    },
    {
        "id": "inject_list_files",
        "type": "inject",
        "z": "abad9a88ca0d6f8d",
        "g": "9aa3ae0427508409",
        "name": "List Files",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 80,
        "wires": [
            [
                "exec_list_files"
            ]
        ]
    },
    {
        "id": "exec_list_files",
        "type": "exec",
        "z": "abad9a88ca0d6f8d",
        "g": "9aa3ae0427508409",
        "command": "find /home/pi/vids/ -maxdepth 1 -type f -iname \"s*\"",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "find",
        "x": 270,
        "y": 80,
        "wires": [
            [
                "function_assign_global"
            ],
            [],
            []
        ]
    },
    {
        "id": "function_assign_global",
        "type": "function",
        "z": "abad9a88ca0d6f8d",
        "g": "9aa3ae0427508409",
        "name": "Assign to Global Array",
        "func": "// Initialize an empty array to store file paths\nlet filePaths = [];\n\n// Check if the exec node returned stdout\nif (msg.payload) {\n    // Split the stdout by newlines to get individual file paths\n    filePaths = msg.payload.split('\\n').filter(line => line.trim() !== '');\n}\n\n// Assign the array to a global context variable\nglobal.set('filePaths', filePaths);\n\n// Optionally, you can pass a confirmation message\nmsg.payload = `Found ${filePaths.length} files.`;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 80,
        "wires": [
            [
                "debug_list_files"
            ]
        ]
    },
    {
        "id": "debug_list_files",
        "type": "debug",
        "z": "abad9a88ca0d6f8d",
        "g": "9aa3ae0427508409",
        "name": "List Files Debug",
        "active": true,
        "tosidebar": false,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 680,
        "y": 80,
        "wires": []
    },
    {
        "id": "function_pick_random",
        "type": "function",
        "z": "abad9a88ca0d6f8d",
        "g": "50f3b47b1d62d456",
        "name": "Pick @random",
        "func": "// Retrieve the global array of file paths\nlet filePaths = global.get('filePaths');\n\n// Check if the array exists and has elements\nif (Array.isArray(filePaths) && filePaths.length > 0) {\n    // Generate a random index\n    let randomIndex = Math.floor(Math.random() * filePaths.length);\n\n    // Get the random file path\n    let randomFile = filePaths[randomIndex];\n\n    // Escape the file path or wrap it in quotes for safe usage in the command line\n    let escapedFilePath = `\"${randomFile.replace(/([\"\\\\$`])/g, '\\\\$1')}\"`;\n\n    // Assign it to msg.payload\n    msg.VideoToPlay = [escapedFilePath, null];\n} else {\n    // Handle the case where the array is empty or undefined\n    msg.VideoToPlay = [null, 'No files available to pick.'];\n}\n\nreturn msg;\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 260,
        "wires": [
            [
                "5fce7e5dd9224f2c",
                "b8fb5788d174801a"
            ],
            [
                "01850a0e7c90f579"
            ]
        ]
    },
    {
        "id": "69199788a63ffebd",
        "type": "rpi-gpio in",
        "z": "abad9a88ca0d6f8d",
        "g": "50f3b47b1d62d456",
        "name": "Key 1",
        "pin": "21",
        "intype": "up",
        "debounce": "25",
        "read": false,
        "bcm": true,
        "x": 110,
        "y": 260,
        "wires": [
            [
                "d07147c9e3559671"
            ]
        ]
    },
    {
        "id": "d07147c9e3559671",
        "type": "delay",
        "z": "abad9a88ca0d6f8d",
        "g": "50f3b47b1d62d456",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 290,
        "y": 260,
        "wires": [
            [
                "function_pick_random"
            ]
        ]
    },
    {
        "id": "64a778f5f842ccab",
        "type": "comment",
        "z": "abad9a88ca0d6f8d",
        "g": "50f3b47b1d62d456",
        "name": "Play Frasier",
        "info": "This is the routine to play a Frasier episode when pressing Key 1",
        "x": 130,
        "y": 180,
        "wires": []
    },
    {
        "id": "39ccc8c63aaea7fd",
        "type": "mqtt in",
        "z": "abad9a88ca0d6f8d",
        "g": "50f3b47b1d62d456",
        "name": "1",
        "topic": "frasier",
        "qos": "2",
        "datatype": "utf8",
        "broker": "7ad2277394b478ef",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 90,
        "y": 320,
        "wires": [
            [
                "7780ca1ff63e28f2"
            ]
        ]
    },
    {
        "id": "7780ca1ff63e28f2",
        "type": "switch",
        "z": "abad9a88ca0d6f8d",
        "g": "50f3b47b1d62d456",
        "name": "if 'play'",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "play",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 220,
        "y": 320,
        "wires": [
            [
                "d07147c9e3559671"
            ]
        ]
    },
    {
        "id": "inject_pick_random",
        "type": "inject",
        "z": "abad9a88ca0d6f8d",
        "g": "50f3b47b1d62d456",
        "name": "Pick Random File",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 140,
        "y": 220,
        "wires": [
            [
                "d07147c9e3559671"
            ]
        ]
    },
    {
        "id": "0ee5394a19ec2f9d",
        "type": "exec",
        "z": "abad9a88ca0d6f8d",
        "g": "7af0599b75ce96bf",
        "command": "pkill vlc; pkill python3",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Kill player procs",
        "x": 180,
        "y": 420,
        "wires": [
            [
                "fa0416a1027484fb",
                "10292665f314fc6c"
            ],
            [],
            []
        ]
    },
    {
        "id": "f3ed82aa14152584",
        "type": "mqtt out",
        "z": "abad9a88ca0d6f8d",
        "g": "84c542040034d2c2",
        "name": "",
        "topic": "LastFrasierEpisode",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "7ad2277394b478ef",
        "x": 970,
        "y": 260,
        "wires": []
    },
    {
        "id": "5fce7e5dd9224f2c",
        "type": "change",
        "z": "abad9a88ca0d6f8d",
        "g": "84c542040034d2c2",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "VideoToPlay[0]",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 760,
        "y": 200,
        "wires": [
            [
                "614515168d71178a"
            ]
        ]
    },
    {
        "id": "614515168d71178a",
        "type": "change",
        "z": "abad9a88ca0d6f8d",
        "g": "84c542040034d2c2",
        "name": "",
        "rules": [
            {
                "t": "change",
                "p": "payload",
                "pt": "msg",
                "from": "/home/pi/vids/Frasier/",
                "fromt": "str",
                "to": "",
                "tot": "str"
            },
            {
                "t": "change",
                "p": "payload",
                "pt": "msg",
                "from": ".avi",
                "fromt": "str",
                "to": "",
                "tot": "str"
            },
            {
                "t": "change",
                "p": "payload",
                "pt": "msg",
                "from": ".mkv",
                "fromt": "str",
                "to": "",
                "tot": "str"
            },
            {
                "t": "change",
                "p": "payload",
                "pt": "msg",
                "from": "\"",
                "fromt": "str",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 960,
        "y": 200,
        "wires": [
            [
                "596391fe7b3f5847"
            ]
        ]
    },
    {
        "id": "596391fe7b3f5847",
        "type": "function",
        "z": "abad9a88ca0d6f8d",
        "g": "84c542040034d2c2",
        "name": "Parse data",
        "func": "// Use a regular expression to split the payload on the first dash, with or without surrounding spaces\nlet parts = msg.payload.split(/ - |-(?!.* - )/);\n\n// Initialize an object to hold the extracted values\nlet result = {\n    season: \"\",\n    episode: \"\",\n    title: \"\"\n};\n\nif (parts.length >= 2) {\n    // The first part before the dash is assumed to be 'SxxExx'\n    let seasonEpisode = parts[0];\n    // Attempt to further split season and episode\n    let seasonEpisodeParts = seasonEpisode.match(/S(\\d+)E(\\d+)/i);\n    if (seasonEpisodeParts && seasonEpisodeParts.length === 3) {\n        result.season = seasonEpisodeParts[1];\n        result.episode = seasonEpisodeParts[2];\n    } else {\n        // Handle cases where the season/episode format doesn't match\n        result.season = \"Unknown\";\n        result.episode = \"Unknown\";\n    }\n\n    // Everything after the dash is the title\n    result.title = parts.slice(1).join(' - ').trim();\n} else {\n    // In case the string doesn't properly split, set a default or handle as error\n    result.title = \"Invalid format - \" + msg.payload;\n}\n\n// Assign the result object to msg.payload\nmsg.payload = result;\n\n// Return the message object to continue the flow\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 260,
        "wires": [
            [
                "f3ed82aa14152584",
                "a2eff87653e53d73"
            ]
        ]
    },
    {
        "id": "a2eff87653e53d73",
        "type": "debug",
        "z": "abad9a88ca0d6f8d",
        "g": "84c542040034d2c2",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 930,
        "y": 320,
        "wires": []
    },
    {
        "id": "fa0416a1027484fb",
        "type": "exec",
        "z": "abad9a88ca0d6f8d",
        "g": "7af0599b75ce96bf",
        "command": "XDG_RUNTIME_DIR=/run/user/1000 DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus /usr/bin/cvlc --file-caching=5000  --no-fb-tty --vout fb --fbdev=/dev/fb0 --quiet ",
        "addpay": "VideoToPlay[0]",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "CVLC",
        "x": 390,
        "y": 420,
        "wires": [
            [],
            [
                "a9237caf8c926fae"
            ],
            []
        ]
    },
    {
        "id": "01850a0e7c90f579",
        "type": "debug",
        "z": "abad9a88ca0d6f8d",
        "g": "50f3b47b1d62d456",
        "name": "Some error",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload[1]",
        "targetType": "msg",
        "statusVal": "payload[1]",
        "statusType": "auto",
        "x": 510,
        "y": 320,
        "wires": []
    },
    {
        "id": "10292665f314fc6c",
        "type": "debug",
        "z": "abad9a88ca0d6f8d",
        "g": "7af0599b75ce96bf",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "VideoToPlay[0]",
        "targetType": "msg",
        "statusVal": "VideoToPlay[0]",
        "statusType": "auto",
        "x": 400,
        "y": 480,
        "wires": []
    },
    {
        "id": "b8fb5788d174801a",
        "type": "link out",
        "z": "abad9a88ca0d6f8d",
        "g": "50f3b47b1d62d456",
        "name": "link out 2",
        "mode": "link",
        "links": [
            "0bdf25ad2db8b823"
        ],
        "x": 585,
        "y": 200,
        "wires": []
    },
    {
        "id": "0bdf25ad2db8b823",
        "type": "link in",
        "z": "abad9a88ca0d6f8d",
        "g": "7af0599b75ce96bf",
        "name": "link in 2",
        "links": [
            "b8fb5788d174801a"
        ],
        "x": 55,
        "y": 420,
        "wires": [
            [
                "0ee5394a19ec2f9d"
            ]
        ]
    },
    {
        "id": "49232eca1c1b13cc",
        "type": "delay",
        "z": "abad9a88ca0d6f8d",
        "g": "ff624337f71e6c66",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 390,
        "y": 600,
        "wires": [
            [
                "751d51dfcded41f7"
            ]
        ]
    },
    {
        "id": "92bcad8254dbf885",
        "type": "switch",
        "z": "abad9a88ca0d6f8d",
        "g": "ff624337f71e6c66",
        "name": "if 'stop'",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "stop",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 240,
        "y": 660,
        "wires": [
            [
                "49232eca1c1b13cc"
            ]
        ]
    },
    {
        "id": "751d51dfcded41f7",
        "type": "exec",
        "z": "abad9a88ca0d6f8d",
        "g": "ff624337f71e6c66",
        "command": "pkill vlc",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 540,
        "y": 600,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "9e34b4a2c405b0b6",
        "type": "rpi-gpio in",
        "z": "abad9a88ca0d6f8d",
        "g": "ff624337f71e6c66",
        "name": "Key 2",
        "pin": "20",
        "intype": "up",
        "debounce": "50",
        "read": false,
        "bcm": true,
        "x": 110,
        "y": 580,
        "wires": [
            [
                "49232eca1c1b13cc"
            ]
        ]
    },
    {
        "id": "01dbddaf82aed932",
        "type": "inject",
        "z": "abad9a88ca0d6f8d",
        "g": "ff624337f71e6c66",
        "name": "inject",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 110,
        "y": 620,
        "wires": [
            [
                "49232eca1c1b13cc"
            ]
        ]
    },
    {
        "id": "f4e3f433d82ec260",
        "type": "mqtt in",
        "z": "abad9a88ca0d6f8d",
        "g": "ff624337f71e6c66",
        "name": "1",
        "topic": "frasier",
        "qos": "2",
        "datatype": "utf8",
        "broker": "7ad2277394b478ef",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 110,
        "y": 660,
        "wires": [
            [
                "92bcad8254dbf885"
            ]
        ]
    },
    {
        "id": "46541e988de47929",
        "type": "comment",
        "z": "abad9a88ca0d6f8d",
        "g": "8e0e14a4a8ae4da8",
        "name": "Shutdown",
        "info": "",
        "x": 100,
        "y": 760,
        "wires": []
    },
    {
        "id": "3a1639b38e613dbb",
        "type": "rpi-gpio in",
        "z": "abad9a88ca0d6f8d",
        "g": "8e0e14a4a8ae4da8",
        "name": "",
        "pin": "27",
        "intype": "up",
        "debounce": "25",
        "read": false,
        "bcm": true,
        "x": 100,
        "y": 800,
        "wires": [
            [
                "67678a223dc5bf97"
            ]
        ]
    },
    {
        "id": "67678a223dc5bf97",
        "type": "exec",
        "z": "abad9a88ca0d6f8d",
        "g": "8e0e14a4a8ae4da8",
        "command": "sudo shutdown now",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 310,
        "y": 800,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "332bb8d08ca5a6d5",
        "type": "catch",
        "z": "abad9a88ca0d6f8d",
        "g": "8e0e14a4a8ae4da8",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 100,
        "y": 860,
        "wires": [
            [
                "a34c56cbb99ba96c"
            ]
        ]
    },
    {
        "id": "a34c56cbb99ba96c",
        "type": "debug",
        "z": "abad9a88ca0d6f8d",
        "g": "8e0e14a4a8ae4da8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 250,
        "y": 860,
        "wires": []
    },
    {
        "id": "a9237caf8c926fae",
        "type": "debug",
        "z": "abad9a88ca0d6f8d",
        "g": "7af0599b75ce96bf",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "VideoToPlay[0]",
        "statusType": "auto",
        "x": 520,
        "y": 420,
        "wires": []
    },
    {
        "id": "7ad2277394b478ef",
        "type": "mqtt-broker",
        "name": "",
        "broker": "192.168.111.216",
        "port": "1883",
        "clientid": "FrasierBox",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    }
]
